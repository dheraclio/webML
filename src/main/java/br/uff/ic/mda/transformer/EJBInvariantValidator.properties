# EJB invariants

# Todo EJBServingAttribute pertence a um EJBEntityComponent
everyEJBServingAttributebelongstoEJBEntityComponent=EJBServingAttribute.\
allInstances()->collect(sa : EJBServingAttribute | sa.class)->\
forAll(c : EJBClass | c.oclIsKindOf(EJBEntityComponent))

# Toda EJBDataSchemaElement precisa ter um EJBDataSchema
compositionEJBDataSchemaElementEJBDataSchema=EJBDataSchemaElement.\
allInstances().package->forAll(p : EJBDataSchema | p <> NULL_EJBDS)

# Toda EJBFeature precisa ter uma EJBClass
compositionEJBFeatureEJBClass=EJBFeature.allInstances()->\
collect(f : EJBFeature | f.class)->forAll(c : EJBClassifier | c <> NULL_EJBC)

# Toda EJBParameter precisa ter um BusinessMethod
compositionEJBParameterBusinessMethod=EJBParameter.allInstances()->\
collect(p : EJBParameter | p.operation)->forAll(o : BusinessMethod | o <> NULL_BM)

# Toda EJBEntityComponent precisa ter, no minimo, um Table
#compositionEJBEntityComponentTable=EJBEntityComponent.allInstances()->\
#forAll(ec : EJBEntityComponent | ec.usedTable->size() >= 1)

# Toda EJBDataAssociation precisa ter dois EJBAssociationEnd
compositionEJBDataAssociationEJBAssociation=EJBDataAssociation.allInstances()->\
forAll(da : EJBDataAssociation | da.associationEnds->size() = 2)

# Toda EJBModelElement precisa que o campo 'name' esteja preenchido, exceto EJBAssociation e EJBAssociationEnd
restrictionRequiredFieldNameEJBModelElement=EJBModelElement.allInstances()->\
forAll(me : EJBModelElement | me.name <> '' or \
me.oclIsKindOf(EJBDataAssociation) or me.oclIsKindOf(EJBAssociationEnd))

# Todo BusinessMethod pertencente a um EJBEntityComponent que comeca seu nome com 'find' deve comecar tambem 'findAll', 'findBy', 'findOne' ou 'findMany'
restrictionMethodNametoEJBEntityComponent=BusinessMethod.allInstances()->\
select(bm : BusinessMethod | bm <> NULL_BM)->\
select(bm : BusinessMethod | bm.class.oclIsTypeOf(EJBEntityComponent))->\
select(bm : BusinessMethod | bm.name.size() >= 4 and \
bm.name.substring(1, 4) = 'find')->\
forAll(bm : BusinessMethod | bm.name.size() >= 7 and \
(if bm.name.size() = 7 then bm.name = 'findAll' else \
bm.name.substring(1, 6) = 'findBy' or \
bm.name.substring(1, 7) = 'findOne' or \
bm.name.substring(1, 8) = 'findMany' endif))

# Todo EJBSet precisa ter um tipo
everyEJBSetmusthaveatype=EJBSet.allInstances()->\
forAll(s : EJBSet | s.elementType <> NULL_EJBC)

# ********** Novos invariantes (disciplina de Engenharia de Software) **********



# Nenhum metodo pode come\u008dar com 'ejb'
prefixEjbisforbidden=BusinessMethod.allInstances()->\
forAll(bm | if bm.name.size() >= 3 then \
bm.name.substring(1, 3) <> 'ejb' else true endif)

# N\u2039o pode ter BusinessMethods em uma mesma EJBClass com mesmo nome
onlyOneBusinessMethodNameperEJBClass=EJBClass.allInstances()->\
forAll(c:EJBClass |c.feature->select(f|f.oclIsTypeOf(BusinessMethod))->\
collect(f|f.oclAsType(BusinessMethod))->forAll(a| c.feature->\
select(f|f.oclIsTypeOf(BusinessMethod))->select(f| f.name = a.name and \
f.oclAsType(BusinessMethod).parameter->size() = a.oclAsType(BusinessMethod).\
parameter->size() and f.oclAsType(BusinessMethod).parameter->\
forAll(p|a.oclAsType(BusinessMethod).parameter->includes(p)))->size() = 1))

# N\u2039o pode ter EJBAttribute e EJBAssociationEnd em uma mesma EJBClass com mesmo nome
onlyOneAttrOrAsscEndNameperEJBClass=EJBClass.allInstances()->\
forAll(c:EJBClass | c.feature->select(f|f.oclIsTypeOf(EJBAttribute) or \
f.oclIsKindOf(EJBAssociationEnd))->forAll(a | c.feature->\
select(f|f.oclIsTypeOf(EJBAttribute) or f.oclIsKindOf(EJBAssociationEnd))->\
select(f|f.name = a.name)->size() = 1))

##Usam opera\u00e7\u00f5es
# Todos os metodos precisar ser Remove, Create, Finder ou Home methods.
#allowedTypesofMethods=BusinessMethod.allInstances()->\
#select(bm | bm <> NULL_BM)->forAll(bm | bm.isRemoveMethod() or \
#bm.isFinderMethod() or bm.isCreateMethod() or bm.isHomeMethod() or \
#bm.name = 'null')

# Todo metodo que come\u008da com 'create' tem que ser um create method
#prefixCreatemustbeaCreateMethod=BusinessMethod.allInstances()->\
#forAll(bm | if bm.name.size() >= 6 then (if bm.name.substring(1, 6) = 'create' \
#then bm.isCreateMethod() else true endif) else true endif)

# Todo metodo que come\u008da com 'remove' tem que ser um remove method
#prefixRemovemustbeaRemoveMethod=BusinessMethod.allInstances()->\
#forAll(bm | if bm.name.size() >= 6 then (if bm.name.substring(1, 6) = 'remove' \
#then bm.isRemoveMethod() else true endif) else true endif)

# Todo metodo que come\u008da com 'find' tem que ser um finder method
#prefixFindmustbeaFinderMethod=BusinessMethod.allInstances()->\
#forAll(bm | if bm.name.size() >= 4 then \
#(if bm.name.substring(1, 4) = 'find' then bm.isFinderMethod() else \
#true endif) else true endif)

#Dando erro sem motivo
# Toda EJBTyped precisa ter um EJBClassifier
#compositionEJBTypedEJBClassifier=EJBTyped.allInstances()->\
#collect(t : EJBTyped | t.type)->forAll(c : EJBClassifier | c <> NULL_EJBC)
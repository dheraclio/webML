# UMLEJB invariants

# Restricao de cardinalidade das metaclasses
# UMLDataTypeToEJBDataType
#cardinalityRestrictionToUMLDataTypeToEJBDataType=\
#UMLDataTypeToEJBDataType.allInstances()->\
#forAll(inst | inst.dataType->notEmpty() and inst.ejbDataType->notEmpty())

# UMLClassToEJBKeyClass
#cardinalityRestrictionToUMLClassToEJBKeyClass=UMLClassToEJBKeyClass.\
#allInstances()->forAll(inst | inst.class->notEmpty() and inst.id->notEmpty() \
#and inst.keyClass->notEmpty())

# UMLAssociationClassToEJBKeyClass
#cardinalityRestrictionToUMLAssociationClassToEJBKeyClass=\
#UMLAssociationClassToEJBKeyClass.allInstances()->\
#forAll(inst | inst.associationClass->notEmpty() and inst.id->notEmpty() and \
#inst.keyClass->notEmpty())

# UMLOperationToBusinessMethod
#cardinalityRestrictionToUMLOperationToBusinessMethod=\
#UMLOperationToBusinessMethod.allInstances()->\
#forAll(inst | inst.operation->notEmpty() and inst.businessMethod->notEmpty())

# UMLParameterToEJBParameter
# cardinalityRestrictionToUMLParameterToEJBParameter=\
#UMLParameterToEJBParameter.allInstances()->\
#forAll(inst | inst.parameter->notEmpty() and inst.ejbParameter->notEmpty())

# UMLAttributeToEJBAttribute
#cardinalityRestrictionToUMLAttributeToEJBAttribute=\
#UMLAttributeToEJBAttribute.allInstances()->\
#forAll(inst | inst.attribute->notEmpty() and inst.ejbAttribute->notEmpty())

# UMLClassToEJBDataClass
#cardinalityRestrictionToUMLClassToEJBDataClass=UMLClassToEJBDataClass.\
#allInstances()->forAll(inst | inst.class->notEmpty() and \
#inst.ejbDataClass->notEmpty())

# UMLAssociationToEJBDataAssociation
#cardinalityRestrictionToUMLAssociationToEJBDataAssociation=\
#UMLAssociationToEJBDataAssociation.allInstances()->\
#forAll(inst | inst.association->notEmpty() and \
#inst.ejbDataAssociation->notEmpty())

# UMLAssociationClassToEJBDataClass
#cardinalityRestrictionToUMLAssociationClassToEJBDataClass=\
#UMLAssociationClassToEJBDataClass.allInstances()->\
#forAll(inst | inst.associationClass->notEmpty() and \
#inst.ejbDataClass->notEmpty())

# UMLAssociationEndToEJBDataEndusingRule8
#cardinalityRestrictionToUMLAssociationEndToEJBDataEndusingRule8=\
#UMLAssociationEndToEJBDataEndusingRule8.allInstances()->\
#forAll(inst | inst.associationEnd->notEmpty() and \
#inst.ejbAssociationEnd->notEmpty())

# UMLAssociationEndToEJBDataEndusingRule9
#cardinalityRestrictionToUMLAssociationEndToEJBDataEndusingRule9=\
#UMLAssociationEndToEJBDataEndusingRule9.allInstances()->\
#forAll(inst | inst.associationEnd->notEmpty() and \
#inst.ejbAssociationEnd->notEmpty())

# UMLAssociationEndEmEJBAssociationusingRule10
#cardinalityRestrictionToUMLAssociationEndEmEJBAssociationusingRule10=\
#UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
#forAll(inst | inst.associationEnd->notEmpty() and \
#inst.ejbDataAssociation->notEmpty() and \
#inst.ejbAssociationEnd1->notEmpty() and \
#inst.ejbAssociationEnd2->notEmpty())

# UMLAssociationEndEmEJBAssociationusingRule11
#cardinalityRestrictionToUMLAssociationEndEmEJBAssociationusingRule11=\
#UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
#forAll(inst | inst.associationEnd->notEmpty() and \
#inst.ejbAssociationEnd2->notEmpty())

# UMLClassToEJBEntityComponent
#cardinalityRestrictionToUMLClassToEJBEntityComponent=\
#UMLClassToEJBEntityComponent.allInstances()->\
#forAll(inst | inst.class->notEmpty() and \
#inst.entityComponent->notEmpty() and inst.dataClass->notEmpty() and \
#inst.dataSchema->notEmpty() and inst.servingAttribute->notEmpty())

# UMLSetToEJBSet
#cardinalityRestrictionToUMLSetToEJBSet=UMLSetToEJBSet.allInstances()->\
#forAll(inst | inst.umlSet->notEmpty() and inst.ejbSet->notEmpty())
#-------------------------------------------

# ********** Novos invariantes (retirados do livro 'MDA Explained') **********
# UMLDataTypeToEJBDataType
# N\u2039o tem invariantes novos

# UMLClassToEJBKeyClass
# TARGET (J\u2021 existia) Todo atributo 'id' criado pela regra UMLClassToEJBKeyClass deve pertencer a EJBKeyClass gerada pela mesma regra
primaryKeymustbelongstoaEJBKeyClassfromUMLClass=UMLClassToEJBKeyClass.\
allInstances()->forAll(inst | inst.id.class.name = inst.keyClass.name)

# TARGET Todo atributo 'id' criado pela regra UMLClassToEJBKeyClass deve ser do tipo EJBInteger
primaryKeymustbeEJBIntegerfromUMLClass=UMLClassToEJBKeyClass.allInstances()->\
forAll(inst | inst.id.type.name = 'Integer')

# UMLAssociationClassToEJBKeyClass
# TARGET Todo atributo 'id' criado pela regra UMLClassToEJBKeyClass, que s\u2039o 2, devem pertencer a EJBKeyClass gerada pela mesma regra
primaryKeymustbelongstoaEJBKeyClassfromUMLAssociationClass=\
UMLClassToEJBKeyClass.allInstances()->\
forAll(inst | inst.id.class.name = inst.keyClass.name)

# TARGET Todo atributo 'id' criado pela regra UMLAssociationClassToEJBKeyClass, que s\u2039o 2, devem ser do tipo EJBInteger
primaryKeymustbeEJBIntegerfromUMLAssociationClass=UMLClassToEJBKeyClass.\
allInstances()->forAll(inst | inst.id.type.name = 'Integer')

# UMLOperationToBusinessMethod
# N\u2039o tem invariantes novos

# UMLParameterToEJBParameter
# N\u2039o tem invariantes novos

# UMLAttributeToEJBAttribute
# N\u2039o tem invariantes novos

# UMLClassToEJBDataClass
# SOURCE Class usada nesta transforma\u008d\u2039o n\u2039o pode ser a Outermost (mais 'externa')
UMLClassfromUMLClassToEJBDataClasscannotbeanOutermostclass=\
UMLClassToEJBDataClass.allInstances()->\
forAll(inst | not inst.class.isOuterMostContainer())

# UMLAssociationToEJBDataAssociation
# SOURCE Association usada nesta transforma\u008d\u2039o deve ter algum de seus AssociationEnds com composition = true
UMLAssociation=UMLAssociationToEJBDataAssociation.allInstances()->\
forAll(inst | inst.association.oclIsTypeOf(Association) and \
inst.association.associationEnds->\
exists(ae : AssociationEnd | ae.composition = true))

# UMLAssociationClassToEJBDataClass
# SOURCE AssociationClass n\u2039o podem ter AssociationEnds com composition = true
AssociationClassfromUMLAssociationClassToEJBDataClasscannothaveAssociationEndwithcomposition=\
UMLAssociationClassToEJBDataClass.allInstances()->forAll\
(inst | not inst.associationClass.feature->\
select(f | f.oclIsTypeOf(AssociationEnd))->\
collect(f | f.oclAsType(AssociationEnd))->\
exists(ae | ae.otherEnd->exists(oe | oe.composition = true)))

# UMLAssociationEndToEJBDataEndusingRule8
# SOURCE Association tem que ser do tipo Association (p.e. n\u2039o pode ser uma AssociationClass)
AssociationfromUMLAssociationEndToEJBDataEndusingRule8mustbetypedasAssociation=\
UMLAssociationEndToEJBDataEndusingRule8.allInstances()->\
forAll(inst | inst.associationEnd.association.oclIsTypeOf(Association))

# SOURCE O outermost class da classe que o AssociationEnd pertence deve ser igual ao outermost class do tipo do AssociationEnd
AssociationrelationtypefromUMLAssociationEndToEJBDataEndusingRule8=\
UMLAssociationEndToEJBDataEndusingRule8.allInstances()->\
forAll(inst | inst.associationEnd.class.getOuterMostContainer() = \
inst.associationEnd.classifier.oclAsType(Class).getOuterMostContainer())

# UMLAssociationEndToEJBDataEndusingRule9
# SOURCE Association tem que ser do tipo Association (p.e. n\u2039o pode ser uma AssociationClass)
AssociationfromUMLAssociationEndToEJBDataEndusingRule9mustbetypedasAssociation=\
UMLAssociationEndToEJBDataEndusingRule9.allInstances()->\
forAll(inst | inst.associationEnd.association.oclIsTypeOf(Association))

# SOURCE O outermost class da classe que o AssociationEnd pertence deve ser igual ao outermost class do tipo do AssociationEnd
AssociationrelationtypefromUMLAssociationEndToEJBDataEndusingRule9=\
UMLAssociationEndToEJBDataEndusingRule9.allInstances()->\
forAll(inst | inst.associationEnd.class.getOuterMostContainer() <> \
inst.associationEnd.classifier.oclAsType(Class).getOuterMostContainer())

# UMLAssociationEndEmEJBAssociationusingRule10
# SOURCE Upper do AssociationEnd precisa ser diferente de 1
AssociationEndUppermustbedifferentthan1forUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.associationEnd.upper <> '1')

# SOURCE A Association do AssociationEnd usado deve ser uma AssociationClass
AssociationofanAssociationEndmustbeanAssociationClassfromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.associationEnd.association.oclIsTypeOf(AssociationClass))

# EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO !
# SOURCEO Outermost da Association de um AssociationEnd deve ser igual ao outermost do tipo do mesmo AssociationEnd
outermostclassofanAssociationfanAssociationEndmustbeequaltotheoutermostclassofthetypeofthesameAssociationEndfromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.associationEnd.association.oclAsType(Class).getOuterMostContainer().name \
=  inst.associationEnd.classifier.oclAsType(Class).getOuterMostContainer().name)

# TARGET O Lower de um EJBAssociationEnd (1) deve ser 0
lowerEJBAssociationEnd1mustbe0fromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd1.lower = '0')

# TARGET O Upper de um EJBAssociationEnd (1) deve ser *
upperEJBAssociationEnd1mustbe*fromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd1.upper = '*')

# TARGET O Lower de um EJBAssociationEnd (2) deve ser 1
lowerdEJBAssociationEnd2mustbe1fromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd2.lower = '1')

# TARGET O Upper de um EJBAssociationEnd (2) deve ser 1
upperEJBAssociationEnd2mustbe1fromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd2.upper = '1')

# TARGET A composicao do EJBAssociationEnd (1) deve ser false
compositionAssociationEnd1mustbefalsefromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd1.composition = false)

# TARGET Os AssociationEnds (1 e 2) devem ter a mesma Association, criada pela transforma\u008d\u2039o
bothEJBAssociationEndsmusthavethesameEJBDataAssociationfromUMLAssociationEndEmEJBAssociationusingRule10=\
UMLAssociationEndEmEJBAssociationusingRule10.allInstances()->\
forAll(inst | inst.ejbAssociationEnd1.association =  inst.ejbDataAssociation \
and inst.ejbAssociationEnd2.association =  inst.ejbDataAssociation)

# UMLAssociationEndEmEJBAssociationusingRule11
# SOURCE O Upper de um AssociationEnd deve ser diferente de 1
upperAssociationEndmustbedifferentthan1fromUMLAssociationEndEmEJBAssociationusingRule11=\
UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
forAll(inst | inst.associationEnd.upper <> '1')

# SOURCE O Association do AssociationEnd deve ser um AssociationClass
associationofAssociationEndmustbeanAssociationClassfromUMLAssociationEndEmEJBAssociationusingRule11=\
UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
forAll(inst | inst.associationEnd.association.oclIsTypeOf(AssociationClass))

# EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO ! EST\u00e7 MUITO ESTRANHO !
# SOURCE O Outermost da Association de um AssociationEnd deve ser igual ao outermost do tipo do mesmo AssociationEnd
outermostAssociationmustbeequaloutermostTypeAssociationEndfromUMLAssociationEndEmEJBAssociationusingRule11=\
UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
forAll(inst | inst.associationEnd.association.oclAsType(Class).getOuterMostContainer().name <>  \
inst.associationEnd.classifier.oclAsType(Class).getOuterMostContainer().name)

# TARGET O Lower de um EJBAssociationEnd (2) deve ser 1
lowerEJBAssociation2Endmustbe1fromUMLAssociationEndEmEJBAssociationusingRule11=\
UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
forAll(inst | inst.ejbAssociationEnd2.lower = '1')

# TARGET O Upper de um EJBAssociationEnd (2) deve ser 1
upperEJBAssociationEnd2mustbe1fromUMLAssociationEndEmEJBAssociationusingRule11=\
UMLAssociationEndEmEJBAssociationusingRule11.allInstances()->\
forAll(inst | inst.ejbAssociationEnd2.upper = '1')

# UMLClassToEJBEntityComponent
# SOURCE Class deve ser outermost class
classmustbeoutermostfromUMLClassToEJBEntityComponent=\
UMLClassToEJBEntityComponent.allInstances()->\
forAll(inst | inst.class.isOuterMostContainer())

# TARGET ServingAttribute precisa pertencer ao EntityComponent gerado
ServingAttributemustbelongtoEntityComponentfromUMLClassToEJBEntityComponent=\
UMLClassToEJBEntityComponent.allInstances()->\
forAll(inst | inst.servingAttribute.class = inst.entityComponent)

# TARGET Type of ServingAttribute must be the generated DataClass
ServingAttributeTypemustbeDataClassfromUMLClassToEJBEntityComponent=\
UMLClassToEJBEntityComponent.allInstances()->\
forAll(inst | inst.servingAttribute.type = inst.dataClass)

# TARGET Pacote do DataClass deve ser o DataSchema
DataClassPackagemustbeDataSchemafromUMLClassToEJBEntityComponent=\
UMLClassToEJBEntityComponent.allInstances()->\
forAll(inst | inst.dataClass.package = inst.dataSchema)

# UMLSetToEJBSet
# N\u2039o tem invariantes novos


#********** Invariantes que verifica se, para cada regra, as **********
#**********      entidades que deviam ser transformadas      **********
#**********                  realmente foram                 **********
# Regra UMLDataTypetoEJBDataType
verifyUMLDataTypethatmustbetransformedtoEJBKeyClass=\
DataType.allInstances()->select(dt : DataType | dt.oclIsTypeOf(DataType))->\
forAll(dt : DataType | dt.transformerToEjbDataType->notEmpty())

# Regra UMLClasstoEJBKeyClass
verifyUMLClassthatmustbetransformedtoEJBKeyClass=\
Class.allInstances()->select(c : Class | c.oclIsTypeOf(Class))->\
excluding(NULL_CLASS)->forAll(c : Class | c.transformerToClass->notEmpty())

# Regra UMLAssociationClasstoEJBKeyClass
verifyUMLAssociationClassthatmustbetransformedtoEJBKeyClass=\
AssociationClass.allInstances()->\
forAll(ac : AssociationClass | ac.transformerToAssociationClass->notEmpty())

# Regra UMLClassToEJBEntityComponent
verifyUMLClassthatmustbetransformedtoEJBEntityComponent=\
Class.allInstances()->select(c : Class | c.oclIsTypeOf(Class))->\
select(c : Class | not c.feature->\
select(f : Feature | f.oclIsKindOf(AssociationEnd))->\
collect(ft : Feature | ft.oclAsType(AssociationEnd))->\
exists(ae : AssociationEnd | ae.composition = true))->\
excluding(NULL_CLASS)->forAll(c : Class | c.transformerToEntityComponent->notEmpty())

# Regra UMLClassToEJBDataClass
verifyUMLClassthatmustbetransformedtoEJBDataClass=\
Class.allInstances()->select(c : Class | c.oclIsTypeOf(Class))->\
select(c : Class | c.feature->\
select(f : Feature | f.oclIsKindOf(AssociationEnd))->\
collect(ft : Feature | ft.oclAsType(AssociationEnd))->\
exists(ae : AssociationEnd | ae.composition = true))->\
excluding(NULL_CLASS)->\
forAll(c : Class | c.transformerToEjbDataClass->notEmpty())

# Regra UMLAssociationToEJBDataAssociation
verifyUMLAssociationthatmustbetransformedtoEJBDataAssociation=\
Association.allInstances()->\
select(a : Association | a.oclIsTypeOf(Association))->\
select(a : Association | a.associationEnds->\
exists(ae : AssociationEnd | ae.composition = true))->\
excluding(NULL_ASSOCIATION)->\
forAll(a : Association | a.transformerToEjbDataAssociationusingRule5->notEmpty())

# Regra UMLAssociationClassToEJBDataClass
verifyUMLAssociationClassthatmustbetransformedtoEJBDataClass=\
AssociationClass.allInstances()->\
forAll(ac : AssociationClass | ac.transformerToEjbDataClassfromAssociationClass->notEmpty())

# Regra UMLAttributeToEJBAttribute
verifyUMLAttributethatmustbetransformedtoEJBAttribute=\
Attribute.allInstances()->\
forAll(a : Attribute | a.transformerToEjbAttribute->notEmpty())

# Regra UMLAssociationEndToEJBDataEndusingRule8
verifyUMLAssociationEndthatmustbetransformedtoEJBDataEndusingRule8=\
AssociationEnd.allInstances()->\
select(ae : AssociationEnd | ae.association.oclIsTypeOf(Association))->\
select(ae : AssociationEnd | ae.class.getOuterMostContainer() = \
ae.classifier.oclAsType(Class).getOuterMostContainer())->\
forAll(ae : AssociationEnd | ae.transformerToEjbAssociationEndusingRule8->notEmpty())

# Regra UMLAssociationEndToEJBDataEndusingRule9
verifyUMLAssociationEndthatmustbetransformedtoEJBDataEndusingRule9=\
AssociationEnd.allInstances()->\
select(ae : AssociationEnd | ae.association.oclIsTypeOf(Association))->\
select(ae : AssociationEnd | not (ae.class.getOuterMostContainer() = \
ae.classifier.oclAsType(Class).getOuterMostContainer()))->\
forAll(ae : AssociationEnd | ae.transformerToEjbAssociationEndusingRule9->notEmpty())

# Regra UMLAssociationEndEmEJBAssociationusingRule10
verifyUMLAssociationEndthatmustbetransformedtoEJBAssociationusingRule10=\
AssociationEnd.allInstances()->select(ae : AssociationEnd | ae.upper <> '1')->\
select(ae : AssociationEnd | ae.association.oclIsTypeOf(AssociationClass))->\
select(ae : AssociationEnd | ae.association.oclAsType(AssociationClass).\
getOuterMostContainerFromAssociationClass() = ae.classifier->asOrderedSet()->\
first().oclAsType(Class).getOuterMostContainer())->\
forAll(ae : AssociationEnd | ae.transformerToEjbDataAssociationusingRule10->notEmpty())

# Regra UMLAssociationEndEmEJBAssociationusingRule11
verifyUMLAssociationEndthatmustbetransformedtoEJBAssociationusingRule11=\
AssociationEnd.allInstances()->select(ae : AssociationEnd | ae.upper <> '1')->\
select(ae : AssociationEnd | ae.association.oclIsTypeOf(AssociationClass))->\
select(ae : AssociationEnd | ae.association.oclAsType(AssociationClass).\
getOuterMostContainerFromAssociationClass() <> ae.classifier->asOrderedSet()->\
first().oclAsType(Class).getOuterMostContainer())->\
forAll(ae : AssociationEnd | ae.transformerToEjbDataAssociationusingRule11->notEmpty())

# Regra UMLOperationToBusinessMethod
verifyUMLOperationthatmustbetransformedtoBusinessMethod=\
Operation.allInstances()->excluding(NULL_OPERATION)->\
forAll(op : Operation | op.transformerToBusinessMethod->notEmpty())

# Regra UMLParameterToEJBParameter
verifyUMLParamenterthatmustbetransformedtoEJBParameter=\
Parameter.allInstances()->forAll(p : Parameter | p.transformerToEjbParameter->notEmpty())

# Regra UMLSetToEJBSet
verifyUMLSetthatmustbetransformedtoEJBSet=\
UMLSet.allInstances()->forAll(s : UMLSet | s.transformerToSet->notEmpty())


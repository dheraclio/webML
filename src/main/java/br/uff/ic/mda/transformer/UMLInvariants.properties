# UML invariants

# Classes associativas nao podem ter um AssociationEnd vinculado a ela
# (devido a ser uma Association) que possua composition = true
notExistsCompositionAssociationEndAssignedToAssociationClass = AssociationClass.allInstances()->\
forAll(ac : AssociationClass | ac.associationEnds->\
forAll(ae : AssociationEnd | ae.composition = false))

# Classes associativas nao podem estar associadas a um AssociationEnd (devido a ser uma Class)
associationClassCannotBeTypedByAssociationEnd = AssociationEnd.allInstances()->\
forAll(ae : AssociationEnd | ae.classifier->\
forAll(c : Classifier | not c.oclIsKindOf(AssociationClass)))

# ModelElement precisa de 'name' preenchido, exceto Association  e AssociationEnd
restrictionRequiredFieldNameToModelElement= ModelElement.allInstances()->\
forAll(me : ModelElement | me.name <> '' or me.oclIsKindOf(Association) or \
me.oclIsKindOf(AssociationEnd))

# Todo UMLSet precisa ter um Classifier
restrictionRequiredAssociationUMLSetToClassifier= UMLSet.allInstances()->\
forAll(c : UMLSet | c.elementType <> NULL_CLASSIFIER)

# Todo Feature precisa ter uma Class
restrictionRequiredAssociationFeatureToClass= Feature.allInstances()->\
forAll(f : Feature | not f.class->includes(NULL_CLASS))

# Todo Parameter precisa ter uma Operation
restrictionRequiredAssociationParameterToOperation= Parameter.allInstances()->\
forAll(p : Parameter | p.operation <> NULL_OPERATION)

# Todo AssociationEnd precisa ter uma Association
restrictionRequiredAssociationAssociationEndToAssociation= AssociationEnd.allInstances()\
.association->forAll(a : Association | a <> NULL_ASSOCIATION)

# Todo Association precisa ter, no minimo, 1 AssociationEnd
restrictionMinimunOneAssociationEndPerAssociation= Association.allInstances()->\
excluding(NULL_ASSOCIATION)->forAll(a : Association | a.associationEnds->size() >= 1)

# Nao pode ter ciclos na hierarquia de heranca de classes
noCyclesinClassHierarchy= Class.allInstances()->excluding(NULL_CLASS)->\
forAll(c : Class | c.inheritsFrom->forAll(r : Class | r.superPlus()->excludes(c)))

# ********** Novos invariantes (disciplina de Engenharia de Software) **********
# AssociationEnd's devem ter nomes unicos em uma associacao.
associationEndsNamesAreUniqueInAnAssociation= Association.allInstances()->\
forAll( a : Association | a.associationEnds->forAll\
( ae1, ae2 : AssociationEnd | ae1.name = ae2.name implies ae1 = ae2))

# N\u2039o pode ter Operations em uma mesma Class com mesmo nome
onlyOneOperationNameperClass= Class.allInstances()->\
forAll(c:Class |c.feature->select(f|f.oclIsTypeOf(Operation))->\
collect(f|f.oclAsType(Operation))->forAll(a| c.feature->\
select(f|f.oclIsTypeOf(Operation))->select(f| f.name = a.name and \
f.oclAsType(Operation).parameter->size() = a.oclAsType(Operation).parameter->size() \
and f.oclAsType(Operation).parameter->\
forAll(p|a.oclAsType(Operation).parameter->includes(p)))->size() = 1))

# N\u2039o pode ter Attribute e AssociationEnd em uma mesma Class com mesmo nome
onlyOneAttrOrAsscEndNameperClass= Class.allInstances()->\
forAll(c:Class | c.feature->\
select(f|f.oclIsTypeOf(Attribute) or f.oclIsKindOf(AssociationEnd))->\
forAll(a | c.feature->select(f|f.oclIsTypeOf(Attribute) or \
f.oclIsKindOf(AssociationEnd))->select(f|f.name = a.name)->size() = 1))

# Nao eh permitido getters e setters
prohibitedGettersandSetters= Class.allInstances()->\
forAll(c | c.feature->\
select(f | f.oclIsTypeOf(Operation))->\
collect(f | f.oclAsType(Operation))->\
forAll(op | c.feature->select(f | f.oclIsTypeOf(Attribute))->\
forAll(f | 'get'.concat(f.name).toLower() <> c.name.toLower() and \
'set'.concat(f.name).toLower() <> c.name.toLower())))

# Apenas associacoes binarias podem ser composi\ufffd\u203aes p. 112 Infra
limitCompositeAssociationSize= Association.allInstances()->\
forAll(a | if a.associationEnds->\
exists(ae | ae.composition = true) then \
a.associationEnds->size() = 2 else true endif)

# A multiplicity of a composite aggregation must not have an upper
# bound greater than 1. p. 125 Infra
compositeMultiplicityRestriction = AssociationEnd.allInstances()->\
forAll(ae | if ae.composition = true then ae.upper = '1' or \
ae.upper.size() = 0 else true endif)

